# name: Release GoByPASS403

# on:
#   push:
#     tags:
#       - 'v*'

# jobs:
#   build:
#     name: Build Binaries
#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         include:
#           - os: ubuntu-latest
#             container: debian:buster
#             goos: linux
#             goarch: amd64
#           - os: macos-latest
#             goos: darwin
#             goarch: amd64
#           - os: windows-latest
#             goos: windows
#             goarch: amd64

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Set up Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: 1.23.6

#       - name: Install dependencies (Linux only)
#         if: matrix.os == 'ubuntu-latest'
#         run: sudo apt-get update && sudo apt-get install -y gcc-multilib

#       - name: Build binary
#         shell: bash
#         env:
#           CGO_ENABLED: 1
#           GOOS: ${{ matrix.goos }}
#           GOARCH: ${{ matrix.goarch }}
#         run: |
#           mkdir -p dist
#           EXT=""
#           if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
#           go build -v -o dist/gobypass403-${{ matrix.goos }}-${{ matrix.goarch }}$EXT ./cmd/gobypass403

#       - name: Upload Release Asset
#         uses: softprops/action-gh-release@v1
#         with:
#           files: dist/*
#           draft: true
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Release GoByPASS403

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build Linux Binary (CGO, glibc 2.28)
    runs-on: ubuntu-latest
    container:
      image: debian:buster
    steps:
      - name: Install dependencies
        run: |
          apt update
          apt install -y build-essential git curl pkg-config sqlite3 libsqlite3-dev

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.6

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build (CGO enabled)
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          mkdir -p dist
          go build -v -o dist/gobypass403-linux-amd64 ./cmd/gobypass403

      - name: Upload Linux Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/gobypass403-linux-amd64
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-other:
    name: Build macOS & Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.6

      - name: Build (CGO enabled)
        shell: bash
        env:
          CGO_ENABLED: 1
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" = "windows" ]; then EXT=".exe"; fi
          go build -v -o dist/gobypass403-${{ matrix.goos }}-${{ matrix.goarch }}$EXT ./cmd/gobypass403

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
